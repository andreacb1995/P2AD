package modelo.modelo.facade;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import controlador.ModulosController;
//import modelo.modelo.facade.JAXBContext;
//import modelo.modelo.facade.JAXBException;
//import modelo.modelo.facade.Marshaller;
//import modelo.modelo.facade.Unmarshaller;
import modelo.modelo.vo.ModuloVO;
import modelo.modelo.vo.ModulosVO;

public class ModulosFacade {
	 private ModulosFacade() {
	    }


	public static void agregarModulo(String nombre, int ciclo, String curso, int horas) {
		ModuloVO moduloAñadido=new ModuloVO(null,nombre,curso,ciclo,horas);
        ModulosVO modulos=unmarshaller();
        if (modulos!=null) {
            int mayorId=0;
            if (!modulos.getModulos().isEmpty()) {
                for (ModuloVO m : modulos.getModulos()) {
                    if (m.getId()>mayorId) {
                        mayorId=m.getId();
                    }
                }
                moduloAñadido.setId(mayorId+1);
            } else {
                moduloAñadido.setId(0);
            }
            modulos.agregarModulo(moduloAñadido);
            marshaller(modulos);
        }
		
	}

	public static void editarModulo(Integer id, String nombre, int ciclo, String curso, int horas) {
		ModulosVO modulos=unmarshaller();
        if (modulos!=null) {
            for (ModuloVO modulo : modulos.getModulos()) {
                if (modulo.getId().equals(id)) {
                    modulo.setNombre(nombre);
                    modulo.setCiclo(ciclo);
                    modulo.setCurso(curso);
                    modulo.setHoras(horas);
                }
            }
            marshaller(modulos);
        }
		
	}

	public static void eliminarModulo(Integer id) {
		 ModulosVO modulos=unmarshaller();
	        if (modulos!=null) {
	            for (int i=0;i<modulos.getModulos().size();i++) {
	                ModuloVO modulo=modulos.getModulos().get(i);
	                if (modulo.getId().equals(id)) {
	                    modulos.getModulos().remove(modulo);
	                    break;
	                }
	            }
	            marshaller(modulos);
	        }
	    }
		

	public static List<String[]> listaModulo() {
		 List<String[]> listaModulos=new ArrayList<>();
	        ModulosVO modulos=unmarshaller();
	        if (modulos==null) {
	            Logger.getLogger(ModulosController.class.getName()).log(Level.INFO,"El archivo 'Modulo.xml' está vacío");
	            return new ArrayList<>();
	        }
	        if (!modulos.getModulos().isEmpty()) {
	            String[] modulosLista;
	            for (ModuloVO m : modulos.getModulos()) {
	                modulosLista=new String[5];
	                modulosLista[0]=m.getNombre();
	                modulosLista[1]="" + m.getCiclo();
	                modulosLista[2]=m.getCurso();
	                modulosLista[3]="" + m.getHoras();
	                modulosLista[4]="" + m.getId();
	                listaModulos.add(modulosLista);
	            }
	        }
	        return listaModulos;
	}

	
	public static void marshaller(ModulosVO modulos) {
        try {
            JAXBContext ctx=JAXBContext.newInstance(ModulosVO.class);
            Marshaller ms=ctx.createMarshaller();
            ms.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
            ms.marshal(modulos,new File("src/Modulo.xml"));
        } catch (JAXBException e) {
            Logger.getLogger(ModulosController.class.getName()).log(Level.SEVERE,"Error en el unmarshalling",e);
        }
    }

    public static ModulosVO unmarshaller() {
        try {
            JAXBContext ctx=JAXBContext.newInstance(ModulosVO.class);
            Unmarshaller ums=ctx.createUnmarshaller();
            return (ModulosVO) ums.unmarshal(new File("src/Modulo.xml"));
        } catch (JAXBException e) {
            Logger.getLogger(ModulosController.class.getName()).log(Level.SEVERE,"Error en el marshalling",e);
        }
        return null;
    }
}
